import subprocess
import os
import threading
from CommonVariables import report_thread, append_to_results, path_to_binary,\
    CANNOT_READ_OUTPUT_ERROR_CODE

class FileRunner:
    
    def __init__(self, file_name, release):
        t = threading.Thread(target=self.run, args=[file_name, release])
        report_thread(t)
        print("Starting Thread for %s on release %s" % (file_name, release))
        t.start()

    def run(self, file_name, release):
        # create command string
        command = "cve-bin-tool " + os.path.join(path_to_binary, file_name)
        # run command and save results into p
        p = subprocess.run( command, shell=True, capture_output=True )
        # count the vulnerabilities detected by cve-bin-tool
        try:
            vulnerability_count = self.count_vulnerabilities(p, release)
        except:
            print("Exception Raised")
            vulnerability_count = CANNOT_READ_OUTPUT_ERROR_CODE
        # Add the count to results
        append_to_results(file_name, release, vulnerability_count)

        # Log Results found as progress indicator
        print("found %d vulnerabilities in %s using release %s" \
            % (vulnerability_count, file_name, release))

    def count_vulnerabilities(self, output, version):
        if (version < "0.3.0"):
            # Cannot get to work
            return 0
        if (version == "0.3.1"):
            return self.vuln_count_v0(output)
        elif (version < "3"):
            return self.vuln_count_v1(output)
        else:
            return self.vuln_count_v3(output)

    def vuln_count_v0(self, output):
        splits_by_colon = output.stdout.decode().split(':')
        if (len(splits_by_colon) != 5):
            raise Exception("Unclear which number is the number of vulnerabilities discovered");
        last_section = splits_by_colon[-1]
        return len(last_section.split("\n"))

    def vuln_count_v1(self, output):
        if (len(output.stdout.decode()) == 0):
            return 0
        splits_by_line_breaker = output.stdout.decode()\
            .split("=================================================================")
        last_section = splits_by_line_breaker[-1]
        return last_section.count("HIGH") + last_section.count("MEDIUM")\
            + last_section.count("LOW") + last_section.count("CRITICAL")\
            + last_section.count("unknown")

    def vuln_count_v2(self, output):
        if (output.returncode == 0):
            return 0
        error_string = output.stderr.decode()
        numbers_in_string = [int(s) for s in error_string.split() if s.isdigit()]
        if (len(numbers_in_string) != 1):
            raise Exception("Unclear which number is the number of vulnerabilities discovered");
        return numbers_in_string[0]

    def vuln_count_v3(self, output):
        sections = output.stdout.decode().split("NewFound");
        last_section = sections[-1]
        return last_section.count("HIGH") + last_section.count("MEDIUM")\
            + last_section.count("LOW") + last_section.count("CRITICAL")\
            + (last_section.count("unknown") / 2)