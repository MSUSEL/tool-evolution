import os
import subprocess
import json
from dotenv import load_dotenv

###
# Initialize Variables
###

# Hardcoded for now. Data is from https://pypi.org/project/cve-bin-tool/#history
## Note: Ignoring Pre-releases: "2.0a0", "3.1rc2", "3.1rc3"
pip_releases = ["0.2.0", "0.3.0", "0.3.1", "1.0", "1.1", "2.0", "2.1", "2.1.post1", "2.2", "2.2.1", "3.0",  "3.1", "3.1.1"]

# Load File names from binary
load_dotenv()
path_to_binary = os.getenv('PATH_TO_BINARY')
binary_files = os.listdir(path_to_binary)

# Initialize results dictionary
results = {}
for file_name in binary_files:
    results[file_name] = {}

###
# Define Helper Functions
###
def parse_error_for_vulnerability_count(error_string):
    numbers_in_string = [int(s) for s in error_string.split() if s.isdigit()]
    if (len(numbers_in_string) > 1):
        raise Exception("Unclear which number is the number of vulnerabilities discovered");
    return numbers_in_string[0]

###
# Display Program Title
###
print("CVE BIN TOOL Runner")
print("===================", end='\n\n')

release = 2.2
for file_name in binary_files[40:60]:
    command = "cve-bin-tool " + os.path.join(path_to_binary, file_name)
    p = subprocess.run( command, shell=True, capture_output=True )
    vulnerability_count = 0
    if (p.returncode == 1):
        vulnerability_count = parse_error_for_vulnerability_count(p.stderr.decode())
    results[file_name][release] = vulnerability_count
    print("found %d vulnerabilities in %s using release %s" \
        % (vulnerability_count, file_name, release))
    

# for release in pip_releases:

    # download that version of cve

    # run cve on binary

    # read results

    # add results to dictionary

###
# OutputResults To File
###
with open('results.json', 'w', encoding='utf-8') as output_file:
    json.dump(results, output_file, ensure_ascii=False, indent=4)

###
# End Program
###
print("\nProgram End")