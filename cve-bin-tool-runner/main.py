import os
from posixpath import split
import subprocess
import json
import time
from dotenv import load_dotenv

###
# Define Helper Functions
###

def count_vulnerabilities(output, version):
    if (version < "0.3.0"):
        # Cannot get to work
        return 0
    if (version == "0.3.1"):
        return vuln_count_v0(output)
    elif (version < "2"):
        return vuln_count_v1(output)
    else:
        return vuln_count_v2(output)

def vuln_count_v0(output):
    splits_by_colon = output.stdout.decode().split(':')
    if (len(splits_by_colon) != 5):
        raise Exception("Unclear which number is the number of vulnerabilities discovered");
    last_section = splits_by_colon[-1]
    return len(last_section.split("\n"))

def vuln_count_v1(output):
    if (len(output.stdout.decode()) == 0):
        return 0
    splits_by_line_breaker = output.stdout.decode()\
        .split("=================================================================")
    last_section = splits_by_line_breaker[-1]
    print(output.stderr.decode())
    return last_section.count("HIGH") + last_section.count("MEDIUM")\
        + last_section.count("LOW") + last_section.count("CRITICAL")\
        + last_section.count("unknown")

def vuln_count_v2(output):
    if (output.returncode == 0):
        return 0
    error_string = output.stderr.decode()
    print(error_string)
    numbers_in_string = [int(s) for s in error_string.split() if s.isdigit()]
    if (len(numbers_in_string) != 1):
        raise Exception("Unclear which number is the number of vulnerabilities discovered");
    return numbers_in_string[0]

###
# Display Program Title
###
print("CVE BIN TOOL Runner")
print("===================", end='\n\n')

###
# Initialize Variables
###

# Hardcoded for now. Data is from https://pypi.org/project/cve-bin-tool/#history
#   Note: Ignoring Pre-releases: "2.0a0", "3.1rc2", "3.1rc3"
pip_releases = ["1.0", "1.1", "2.0", "2.1", \
                            "2.1.post1", "2.2", "2.2.1", "3.0",  "3.1", "3.1.1"]
CANNOT_READ_OUTPUT_ERROR_CODE = -101

# Load File names from binary
load_dotenv()
path_to_binary = os.getenv('PATH_TO_BINARY')
binary_files = os.listdir(path_to_binary)

# Initialize results dictionary
results = {}
for file_name in binary_files:
    results[file_name] = {}

###
# Calculate Scores
###
# for release in pip_releases:
#     # download that version of cve
#     j = subprocess.run( "pip install cve-bin-tool==" + release, shell=True, capture_output=True )

release = "1.1"

for file_name in binary_files:
    # create command string
    command = "cve-bin-tool " + os.path.join(path_to_binary, file_name)
    # run command and save results into p
    p = subprocess.run( command, shell=True, capture_output=True )
    # count the vulnerabilities detected by cve-bin-tool
    try:
        vulnerability_count = count_vulnerabilities(p, release)
    except:
        print("Exception Raised")
        vulnerability_count = CANNOT_READ_OUTPUT_ERROR_CODE
    # Add the count to results
    results[file_name][release] = vulnerability_count
    # Log Results found as progress indicator
    print("found %d vulnerabilities in %s using release %s" \
        % (vulnerability_count, file_name, release))

    if (vulnerability_count != 0):
        time.sleep(1)

###
# OutputResults To File
###
with open('cve-bin-tool-runner/data_outputs/results_' + str(int(time.time())) + '.json', \
        'w', encoding='utf-8') as output_file:
    json.dump(results, output_file, ensure_ascii=False, indent=4)

###
# End Program
###
print("\nProgram End")